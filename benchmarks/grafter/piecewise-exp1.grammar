// basic skeleton for piecewise function
// run with: ./run.rkt --root VirtualRoot fuse benchmarks/tests/piecewise-test1-exp1.grammar
//
// n->differentiate() | x2
// n->square() | x2
// n->addConst(1), n->mulVar() | x4
// 
// this works

traversal fuse {
    case CVirtualRoot {
        ??;
        recur root;
    }
    case CNode {
        iterate left { ??; recur left; }
        iterate right { ??; recur right; }
        ??;
    }
}

// ============================= //
// ========== Program ========== //
// ============================= //

interface VirtualRoot {
    
}
class CVirtualRoot : VirtualRoot {
    children {
        root : Node;
    }
    rules {
        root.final0_args := 1; // n->addConst(1)
    }
}

interface Node {
    // is_leaf property related
    output id : bool;
    output has_left : bool;
    output has_right : bool;
    output is_leaf : bool;

    // main attributes
    input startDom : int;
    input endDom : int;
    input coeff : Poly; // only available to leaf node; for non-leaf this is null()

    // computed attributes
    output final0_coeff : Poly; // after do_all

    // args
    output final0_args : int;
}
class CNode : Node {
    children {
        left : [Node]; // 0 or 1
        right : [Node]; // 0 or 1
    }
    rules {
        // is_leaf property computation
        self.id := true;
        self.is_leaf := self.has_left && self.has_right;
        self.has_left := [0]{ left.id : !true };
        self.has_right := [0]{ right.id : !true };

        left.final0_args := self.final0_args;
        right.final0_args := self.final0_args;
        self.final0_coeff := 
            if self.is_leaf then
                do_all( self.coeff, self.final0_args )
            else
                null();
        
    }
}























