// this tests the traversal step 2 and step 3
// (notice) based on FMM definitions, step 2 does not have any explicit dependencies
// run with:
// racket ./run.rkt --interface VirtualRoot --traversal fuse --grammar benchmarks/grafter/fmm.grammar

traversal fuse {
    case CVirtualRoot {
        ??;
        recur root;
    }
    case CVertex {
        ??;
        iterate c1 { ??; recur c1; }
        iterate c2 { ??; recur c2; }
        iterate c3 { ??; recur c3; }
        iterate c4 { ??; recur c4; }
        recur data;
    }
    case CData {
        iterate next { ??; recur next; }
    }
}

interface VirtualRoot {
}

class CVirtualRoot : VirtualRoot {
    children { 
        root : Vertex; 
    }
    rules {
        // parentPotential base case is initialized to 0
        root.parentPotential := 0;
    }
}

interface Vertex {
    input box.startX : int;
    input box.startY : int;
    input box.endX : int;
    input box.endY : int;

    output parentPotential : int;
    output interactionList : VertexList;

    output x1 : int;
    output y1 : int;
}

class CVertex : Vertex {
    children {
        c1 : [Vertex];
        c2 : [Vertex];
        c3 : [Vertex];
        c4 : [Vertex];
        // (notice) first data represents this vertex
        // the "next" of data represents a head of a list of points if the current vertex is leaf
        data : Data;
    }
    rules {
        self.x1 := ( self.box.startX + self.box.endX ) / 2;
        self.y1 := ( self.box.startY + self.box.endY ) / 2;

        data.potential := 
            0 + getPotential(
                self.x1, self.y1,
                data.mass,
                self.interactionList
            );

        data.finalPotential := data.potential + self.parentPotential;
        data.basePotential := data.finalPotential;

        c1.parentPotential := data.finalPotential;
        c2.parentPotential := data.finalPotential;
        c3.parentPotential := data.finalPotential;
        c4.parentPotential := data.finalPotential;

        // (notice) depend on self **inputs** (not outputs), no need to provide arguments
        // (notice) according to FMM, interaction list will not include children (does not overlap with children list)
        self.interactionList := getInteractionList(); 
    }
}

interface Data {
    input mass : int;
    input coordX : int;
    input coordY : int;

    output potential : int;
    output finalPotential : int;
    output basePotential : int;
}
class CData : Data {
    children {
        // only leaf vertex has non-empty next list
        next : [Data];
    }
    rules {
        // potential base case is 0, see main.cpp:698
        next.potential := 0;
        next.basePotential := self.basePotential;
        next.finalPotential := next.potential + self.basePotential;
    }
}