traversal layout {
  case Inner {
    iterate contents {
      recur contents;
      ??;
    }
    ??;
  }
  case Leaf {
    ??;
  }
}

interface Box {
  input width : int;
  output computedWidth : int;

  input height : int;
  output cumulativeHeight : int; // helper for computedHeight of parent
  output computedHeight : int;
}

class Inner : Box {
  children {
    contents : [Box]; // semantically this should not be empty, but it doesn't hurt
  }
  rules {
    self.computedWidth := foldl self.width .. max( @{self.computedWidth}, contents.computedWidth );
    self.cumulativeHeight := foldl 0.0 .. @{self.cumulativeHeight} + contents.computedHeight;
    self.computedHeight := max( self.height, self.cumulativeHeight );
  }
}
class Leaf : Box {
  children {}
  rules {
    self.computedWidth := self.width;
    self.cumulativeHeight := 0;
    self.computedHeight := self.height;
  }
}