traversal pre {
    Root { visit; recur child }
    CountryContainer { visit; loop childs { visit }; loop childs { recur } }
    Region { visit; loop childs { visit }; loop childs { recur } }
    District { visit; loop childs { visit }; loop childs { recur } }
    VSquare { visit; loop childs { visit }; loop childs { recur } }
    HSquare { visit; loop childs { visit }; loop childs { recur } }
    PollingPlace { visit }
}

traversal post {
    Root { recur child; visit }
    CountryContainer { loop childs { recur }; visit; loop childs { visit } }
    Region { loop childs { recur }; visit; loop childs { visit } }
    District { loop childs { recur }; visit; loop childs { visit } }
    VSquare { loop childs { recur }; visit; loop childs { visit } }
    HSquare { loop childs { recur }; visit; loop childs { visit } }
    PollingPlace { visit }
}

traversal zip {
    Root { visit; recur child }
    CountryContainer { loop childs { visit; recur; visit } }
    Region { loop childs { visit; recur; visit } }
    District { loop childs { visit; recur; visit } }
    VSquare { loop childs { visit; recur; visit } }
    HSquare { loop childs { visit; recur; visit } }
    PollingPlace { visit }
}

// traversal zigzag {
//     Root { visit; recur child }
//     CountryContainer { loop childs { visit }; loop childs { recur }; loop childs { visit } }
//     Region { loop childs { visit }; loop childs { recur }; loop childs { visit } }
//     District { loop childs { visit }; loop childs { recur }; loop childs { visit } }
//     VSquare { loop childs { visit }; loop childs { recur }; loop childs { visit } }
//     HSquare { loop childs { visit }; loop childs { recur }; loop childs { visit } }
//     PollingPlace { visit }
// }

interface IRoot {
    input width : int;
    input height : int;

    input minTurnout : int;
    input maxTurnout : int;

    input showFraud : int;

    input showProjected : int;

    output votesUR : int;

    input fixWidth : int;

    input showJavascript : int;

    output totalMag : int;
}

class Root : IRoot {
    children { child : Node; }
    evaluation {
        child.w := (fixWidth != 0) ? width : width * (totalMag / 63895164);
        child.h := height * (totalMag / 63895164);

        child.rx := width;
        child.by := height;

        child.minTurnout := minTurnout;
        child.maxTurnout := maxTurnout;

        child.showFraud := showFraud;
        child.showProjected := showProjected;

        child.fixWidth := fixWidth;
        child.showJavascript := showJavascript;

        self.totalMag := child.totalMag;
        self.votesUR := child.votesUR / totalMag;
    }
}

interface Node {
    output totalMag : int;

    output minTurnout : int;
    output maxTurnout : int;

    output votesUR : int;

    output showFraud : int;
    output showProjected : int;

    output fixWidth : int;

    output render : int;
    output showJavascript : int;

    output w : int;
    output h : int;
    output x : int;
    output rx : int;
    output y : int;
    output by : int;
}

trait tweenMagnitude {
    children { childs : [Node]; }
    evaluation {
        loop childs {
            self.totalMag := fold 0 .. self$-.totalMag + childs$i.totalMag;
            childs.minTurnout := minTurnout;
            childs.maxTurnout := maxTurnout;

            childs.showFraud := showFraud;
            childs.showProjected := showProjected;

            childs.fixWidth := fixWidth;

            childs.showJavascript := showJavascript;

            //childs.votesUR_sum := fold 0 .. childs$-.votesUR_sum + childs$i.votesUR;
            self.votesUR := fold 0 .. self$-.votesUR + childs$i.votesUR;
        }
    }
}

class CountryContainer(tweenMagnitude) : Node {
    evaluation {
        x := rx - w;
        y := by - h;

        render := (fixWidth != 0) ? x + y + w + h : 0;

        loop childs {
            childs.w := (childs$i.totalMag / totalMag) * w;
            childs.h := h;
            childs.rx := fold x .. childs$-.rx + childs$i.w;
            childs.by := y + h;
        }
    }
}

class Region(tweenMagnitude) : Node {
    evaluation {
        x := rx - w;
        y := by - h;

        render := 0;

        loop childs {

            childs.w := w;
            childs.h := (childs$i.totalMag / totalMag) * h;
            childs.rx := x + w;
            childs.by := fold y .. childs$-.by + childs$i.h;
        }
    }
}

class District(tweenMagnitude) : Node {
    evaluation {
        x := rx - w;
        y := by - h;

        render := (fixWidth != 0) ? x + y + w + h : 0;

        loop childs {
            childs.w := (childs$i.totalMag / totalMag) * w;
            childs.h := h;
            childs.rx := fold x .. childs$-.rx + childs$i.w;
            childs.by := y + h;
        }
    }
}

class VSquare(tweenMagnitude) : Node {
    evaluation {
        x := rx - w;
        y := by - h;

        render := 0;

        loop childs {
            childs.w := w;
            childs.h := (childs$i.totalMag / totalMag) * h;
            childs.rx := x + w;
            childs.by := fold y .. childs$-.by + childs$i.h;
        }
    }
}

class HSquare(tweenMagnitude) : Node {
    evaluation {
        x := rx - w;
        y := by - h;

        render := 0;

        loop childs {
            childs.w := (childs$i.totalMag / totalMag) * w;
            childs.h := h;
            childs.rx := fold x .. childs$-.rx + childs$i.w;
            childs.by := y + h;
        }
    }
}

class PollingPlace : Node {
    attributes {
        input totalVotes : int;
        input totalVotesUR : int;
        input urVotes : int;
        input urVotesProjected : int;
        input turnout : int;

        input defColor : int;
        input urColor : int;
        input fraudColor : int;

        input inJavascript : int;

        output calcRegularColor : int;
        output calcFraudColor: int;
        output calcProjectedColor : int;
        output calcVotesColor : int;

        output magnitude : int;
    }

    evaluation {
        calcProjectedColor := defColor + urColor + urVotesProjected;
        calcRegularColor := defColor + urColor + urVotes;
        calcVotesColor := (turnout > 0) ? calcRegularColor + calcProjectedColor + showProjected : calcRegularColor;
        calcFraudColor := (turnout > 0) ? fraudColor : calcVotesColor;

        // In the original work on FTL, this was actually an (undocumented)
        // rendering command. The following evaluation rule is equivalent for
        // the purposes of static scheduling (i.e., same dependences).
        render := x + y + w + h + calcVotesColor + calcFraudColor + showFraud;

        x := rx - w;
        y := by - h;

        magnitude := (turnout > minTurnout && turnout <= maxTurnout) ? totalVotes : 0;
        totalMag := (inJavascript != 0) ? magnitude : showJavascript * magnitude;

        votesUR := (turnout > minTurnout && turnout <= maxTurnout) ?
            ((turnout > 0) ? ((totalVotesUR * (1 - showProjected)) + ((totalVotes * urVotesProjected) * showProjected)) : totalVotesUR)
            : 0;
    }

}
