traversal preorder {
  case BlockFlow {
    visit self;
    recur self.children;
  }
}

traversal postorder {
  case BlockFlow {
    recur self.children;
    visit self;
  }
}

interface Flow {
  input self.base.writing_mode;
  input self.base.collapsible_margins;

  output self.base.intrinsic_inline_sizes.minimum_inline_size;
  output self.base.intrinsic_inline_sizes.preferred_inline_size;

  output self.base.position.start.i;
  output self.base.position.start.b;
  output self.base.position.size.inline;
  output self.base.position.size.block;

  output self.base.overflow.scroll.origin.x;
  output self.base.overflow.scroll.origin.y;
  output self.base.overflow.scroll.origin.width;
  output self.base.overflow.scroll.origin.height;

  output self.base.overflow.paint.origin.x;
  output self.base.overflow.paint.origin.y;
  output self.base.overflow.paint.origin.width;
  output self.base.overflow.paint.origin.height;

  output self.base.speculated_float_placement_in.left;
  output self.base.speculated_float_placement_in.right;

  output self.base.speculated_float_placement_out.left;
  output self.base.speculated_float_placement_out.right;

  output self.base.stacking_relative_position.x;
  output self.base.stacking_relative_position.y;

  output self.base.block_container_inline_size;

  output self.base.block_container_writing_mode;

  output self.base.block_container_explicit_block_size;

  output self.base.early_absolute_position_info.relative_containing_block_mode;
  output self.base.early_absolute_position_info.relative_containing_block_size.inline;
  output self.base.early_absolute_position_info.relative_containing_block_size.block;

  output self.base.late_absolute_position_info.stacking_relative_position_of_absolute_containing_block.x;
  output self.base.late_absolute_position_info.stacking_relative_position_of_absolute_containing_block.y;

  output self.base.clip.origin.x;
  output self.base.clip.origin.y;
  output self.base.clip.size.width;
  output self.base.clip.size.height;

  output self.base.floats; // Floats structure
}

class BlockFlow : Flow {
  children self.children : Flow;

  input self.fragment.style.writing_mode;

  output self.fragment.border_box.size.inline;
  output self.fragment.border_box.size.block;
  output self.fragment.border_box.start.i;
  output self.fragment.border_box.start.b;

  output self.fragment.border_padding.inline_start;
  output self.fragment.border_padding.inline_end;
  output self.fragment.border_padding.block_start;
  output self.fragment.border_padding.block_end;

  output self.fragment.margin.inline_start;
  output self.fragment.margin.inline_end;
  output self.fragment.margin.block_start;
  output self.fragment.margin.block_end;

  output self.float; // Option<Box<FloatedBlockInfo>> structure

  method self.bubble_inline_sizes_for_block() {
    read self.children.base.intrinsic_inline_sizes.minimum_inline_size;
    read self.children.base.intrinsic_inline_sizes.preferred_inline_size;

    write self.base.intrinsic_inline_sizes.minimum_inline_size;
    write self.base.intrinsic_inline_sizes.preferred_inline_size;
  }

  method self.assign_block_size(layout_context) {
    read self.base.block_container_explicit_block_size;

    read self.base.floats;
    read self.base.floats.writing_mode;
    read self.base.floats.offset;

    read self.fragment.style.writing_mode;
    read self.fragment.margin.block_start;
    read self.fragment.margin.block_end;
    read self.fragment.border_padding.block_start;
    read self.fragment.border_padding.block_end;

    read self.children.base.floats;
    read self.children.base.collapsible_margins;
    read self.children.base.position.start.b;
    read self.children.base.position.size.block;

    write self.base.floats;
    write self.base.floats.offset;
    write self.base.collapsible_margins;
    write self.base.position.start.b;
    write self.fragment.border_box.start.b;
    write self.fragment.border_box.size.block;
    write self.children.base.early_absolute_position_info;
    write self.children.base.floats;
    //write self.children.base.position.start.b;
  }

  method self.assign_inline_sizes(layout_context) {
    read self.base.writing_mode;
    read self.base.block_container_inline_size;
    read self.base.speculated_float_placement_in.left;
    read self.base.speculated_float_placement_in.right;
    read self.fragment.style;
    read self.fragment.margin.inline_start;
    read self.fragment.margin.inline_end;
    read self.fragment.border_box.size.inline;

    write self.base.floats;
    write self.base.position.start;
    write self.base.block_container_inline_size;
    write self.base.block_container_writing_mode;
    write self.fragment.border_box.size.inline;
  }

  method self.compute_stacking_relative_position(layout_context) {
    read self.base.clip;
    read self.base.writing_mode;
    read self.base.position.start;
    read self.base.position.size;
    read self.base.early_absolute_position_info.relative_containing_block_size;
    read self.base.late_absolute_position_info.stacking_relative_position_of_absolute_containing_block;
    read self.fragment;
    read self.fragment.margin;
    read self.fragment.border_box;
    read self.fragment.style;
    read self.children.base.position;

    write self.base.stacking_relative_position.x;
    write self.base.stacking_relative_position.y;
    write self.children.base.stacking_relative_position.x;
    write self.children.base.stacking_relative_position.y;
    write self.base.late_absolute_position_info.stacking_relative_position_of_absolute_containing_block;
  }
}

/*
class InlineFlow : Flow {
  children {
    @access{child_iter_mut()}
    children : [Flow];

    //fragments : InlineFragments;
    //lines : [Line];
  }

  attributes {
    output self.first_line_indentation;

    input self.minimum_line_metrics.space_above_baseline;
    input self.minimum_line_metrics.space_below_baseline;
    input self.minimum_line_metrics.line_ascent;
  }

  evaluation {
    // ...
  }
}
*/
