structure Tokens : TOKENS =
struct
  (* A "scaffold" structure for debugging lexers. *)

type linenum = int
type token = string
val makestring = Int.toString

fun TRAVERSAL(i,j) = "TRAVERSAL   " ^ makestring(i:int)
fun CASE(i,j) = "CASE   " ^ makestring(i:int)
fun RECUR(i,j) = "RECUR   " ^ makestring(i:int)
fun ITERATE(i,j) = "ITERATE   " ^ makestring(i:int)
fun HOLE(i,j) = "HOLE   " ^ makestring(i:int)
fun INTERFACE(i,j) = "INTERFACE   " ^ makestring(i:int)
fun INPUT(i,j) = "INPUT   " ^ makestring(i:int)
fun OUTPUT(i,j) = "OUTPUT   " ^ makestring(i:int)
fun TINT(i,j) = "TINT   " ^ makestring(i:int)
fun TBOOL(i,j) = "TBOOL   " ^ makestring(i:int)
fun CLASS(i,j) = "CLASS   " ^ makestring(i:int)
fun CHILDREN(i,j) = "CHILDREN   " ^ makestring(i:int)
fun RULES(i,j) = "RULES   " ^ makestring(i:int)
fun SELF(i,j) = "SELF   " ^ makestring(i:int)
fun ASSIGN(i,j) = "ASSIGN   " ^ makestring(i:int)
fun DOT(i,j) = "DOT   " ^ makestring(i:int)
fun IF(i,j) = "IF   " ^ makestring(i:int)
fun THEN(i,j) = "THEN   " ^ makestring(i:int)
fun ELSE(i,j) = "ELSE   " ^ makestring(i:int)
fun OR(i,j) = "OR   " ^ makestring(i:int)
fun AND(i,j) = "AND   " ^ makestring(i:int)
fun NOT(i,j) = "NOT   " ^ makestring(i:int)
fun GE(i,j) = "GE   " ^ makestring(i:int)
fun GT(i,j) = "GT   " ^ makestring(i:int)
fun LE(i,j) = "LE   " ^ makestring(i:int)
fun LT(i,j) = "LT   " ^ makestring(i:int)
fun NEQ(i,j) = "NEQ   " ^ makestring(i:int)
fun EQ(i,j) = "EQ   " ^ makestring(i:int)
fun PLUS(i,j) = "PLUS   " ^ makestring(i:int)
fun MINUS(i,j) = "MINUS   " ^ makestring(i:int)
fun TIMES(i,j) = "TIMES   " ^ makestring(i:int)
fun DIVIDE(i,j) = "DIVIDE   " ^ makestring(i:int)

fun RBRACE(i,j) = "RBRACE   " ^ makestring(i:int)
fun LBRACE(i,j) = "LBRACE   " ^ makestring(i:int)
fun RBRACK(i,j) = "RBRACK   " ^ makestring(i:int)
fun LBRACK(i,j) = "LBRACK   " ^ makestring(i:int)
fun RPAREN(i,j) = "RPAREN   " ^ makestring(i:int)
fun LPAREN(i,j) = "LPAREN   " ^ makestring(i:int)
fun SEMICOLON(i,j) = "SEMICOLON   " ^ makestring(i:int)
fun COLON(i,j) = "COLON   " ^ makestring(i:int)
fun EOF(i,j) = "EOF   " ^ makestring(i:int)

fun STRING(s,i,j) = "STRING("^s^")     " ^ makestring(i:int)
fun INT(c,i,j) = "INT("^makestring(c:int)^")   " ^ makestring(i:int)
fun ID(s,i,j) = "ID("^s^")     " ^ makestring(i:int)
fun BOOL(b, i, j) = "ID("^Bool.toString b^")     " ^ makestring(i:int)
end
