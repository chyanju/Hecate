traversal pre {
  case Root {
    ??;
    recur root;
  }
  case HBox {
    ??;
    recur childs;
  }
  case VBox {
    ??;
    recur childs;
  }
  case Leaf {
    ??;
  }
}

traversal post {
  case Root {
    recur root;
    ??;
  }
  case HBox {
    recur childs;
    ??;
  }
  case VBox {
    recur childs;
    ??;
  }
  case Leaf {
    ??;
  }
}

interface Top {
  attributes { }
}

interface HVBox {
  attributes {
    input visible : bool;
    output width : int;
    output height : int;
    output width_out : int; // outer width
    output height_out : int; // outer height
    output right : int;
    output bottom : int;
  }
}

class Root : Top {
    children {
      root : HVBox;
    }
    attributes { }
    methods { }
    rules {
      root.width_out := root.width;
      root.right := root.width;
      root.height_out := root.height;
      root.bottom := root.height;
    }
}

class HBox : HVBox {
    children {
      childs : HVBox+;
    }
    attributes { }
    methods { }
    rules {
      childs$0.width_out := 0;
      childs$+.width_out := childs$-.width_out + childs$i.width;
      childs$0.height_out := 0;
      childs$+.height_out := if (childs$-.height_out > childs$i.height) then childs$-.height_out else childs$i.height;

      childs$0.right := self.right - self.width;
      childs$+.right := childs$-.right + childs$i.width;
      childs$i.bottom := self.bottom;

      self.width := if visible then childs$$.width_out else 0;
      self.height := if self.visible then childs$$.height_out else 0;
    }
}

class VBox : HVBox {
    children {
      childs : HVBox+;
    }
    attributes { }
    methods { }
    rules {
      childs$0.width_out := 0;
      childs$+.width_out := if (childs$-.width_out > childs$i.width) then childs$-.width_out else childs$i.width;
      childs$0.height_out := 0;
      childs$+.height_out := childs$-.height_out + childs$i.height;

      childs$i.right := self.right;
      childs$0.bottom := self.bottom;
      childs$+.bottom := childs$-.bottom + childs$i.height;

      self.width := if visible then childs$$.width_out else 0;
      self.height := if visible then childs$$.height_out else 0;
    }
}

class Leaf : HVBox {
    children { }
    attributes {
      input width_in : int;
      input height_in : int;
    }
    methods { }
    rules {
      self.width := self.width_in;
      self.height := self.height_in;
    }
}
