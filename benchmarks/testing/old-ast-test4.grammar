// this builds upon ast-test3.grammar
// this deals with desugarDecr and desugarIncr
// this also deals with constant propagation
// this also deals with constant folding
// this also deals with unreachable branch removal
// notes:
// 1. this takes too long and haven't finished yet
// 2. constant folding requires expression level post-order traversal
// 3. unreachable branch removal requires statement level pre-order traversal

traversal fuse {
    case CProgram {
        iterate first_function { recur first_function; }
    }
    case CFunction {
        iterate first_statement { ??; recur first_statement; }
        iterate next { recur next; }
    }

    // assignment series
    case CAssignStmt {
        ??;
        recur assigned_expr;
        iterate next { recur next; }
    }
    case CIncrStmt {
        ??;
        recur assigned_expr;
        iterate next { recur next; }
    }
    case CDecrStmt {
        ??;
        recur assigned_expr;
        iterate next { recur next; }
    }
    case CIfStmt {
        ??;
        recur condition;
        iterate then_first_statement { recur then_first_statement; }
        iterate else_first_statement { recur else_first_statement; }
        iterate next { recur next; }
    }
    case CNullStmt {
        ??;
        iterate next { recur next; }
    }

    // expression series
    case CConstantExpr {
        ??;
    }
    case CBinaryExpr {
        ??;
        recur lhs;
        recur rhs;
        ??; // this will compute constant folding (post-order)
    }
    case CVarRefExpr {
        ??;
    }
}

// ============================= //
// ========== Program ========== //
// ============================= //

interface Program {
    
}
class CProgram : Program {
    children {
        first_function : [Function];
    }
    rules {
    }
}

// ============================== //
// ========== Function ========== //
// ============================== //

interface Function {
    
}
class CFunction : Function {
    children {
        next : [Function];
        first_statement : [Statement];
    }
    rules {
        first_statement.original_cp_info := empty_info();
        first_statement.stmt_removal_advice := !true; // don't remove
    }
}

// =============================== //
// ========== Statement ========== //
// =============================== //
// desugarDecr will change CDecrStmt to CAssignStmt
// desugarInc will change CIncrStmt to CAssignStmt

interface Statement {
    // specific for CAssignStmt, CIncrStmt, CDecrStmt
    // corresponds to `int VarId` in `VarRefExpr *Id`
    // if it's CIfStmt or CNullStmt, this value should be null
    input var_id : int;

    // 0: CAssignStmt, 1: CIncrStmt, 2: CDecrStmt, 3: CIfStmt, 4: CNullStmt, others: ??
    output original_stmt_type : int;
    output final0_stmt_type : int;
    output final1_stmt_type : int;
    output final2_stmt_type : int;
    output stmt_removal_advice : bool; // parent tells children whether they should be removed
    output final3_stmt_type : int; // exclusive phase 3 for statement to deal with unreachable branch removal

    // attributes for constant propagation
    output original_cp_info : info;
    output final_cp_info : info;
}

class CAssignStmt : Statement {
    children {
        assigned_expr : Expression; // Expression
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 0;

        // ==== desugarDecr / desugarIncr ==== //
        // statement --> do nothing
        self.final0_stmt_type := 0;
        // expression --> do nothing
        assigned_expr.final0_expr_type := assigned_expr.original_expr_type;
        assigned_expr.final0_value := assigned_expr.original_value;
        assigned_expr.final0_var_id := assigned_expr.original_var_id;
        assigned_expr.is_null := !true;
        assigned_expr.is_special_expr := !true;
        assigned_expr.special_lhs_var_id := null();
        assigned_expr.special_rhs_value := null();
        assigned_expr.special_operator := null();

        // ==== constant propagation ==== //
        // statement
        self.final1_stmt_type := self.final0_stmt_type;
        self.final_cp_info :=
            if assigned_expr.final0_expr_type == 1 then
                // CConstExpr, should update the cp_info
                update_info( self.original_cp_info, self.var_id, assigned_expr.final0_value )
            else
                self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
        // expression
        assigned_expr.original_cp_info := self.original_cp_info;
        assigned_expr.final1_value :=
            if assigned_expr.final0_expr_type == 2 then
                // CVarRefExpr, should replace the variable with constant value
                if query_info( self.original_cp_info, assigned_expr.final0_var_id ) then
                    get_value( self.original_cp_info, assigned_expr.final0_var_id )
                else
                    assigned_expr.final0_value
            else
                assigned_expr.final0_value;
        assigned_expr.final1_expr_type :=
            if assigned_expr.final0_expr_type == 2 then
                // CVarRefExpr
                if query_info( self.original_cp_info, assigned_expr.final0_var_id ) then
                    // CVarRefExpr -> CConstantExpr
                    1
                else
                    assigned_expr.final0_expr_type
            else
                assigned_expr.final0_expr_type;
        assigned_expr.final1_var_id := assigned_expr.final0_var_id; // don't care

        // ==== constant folding ==== //
        // statement --> do nothing
        self.final2_stmt_type := self.final1_stmt_type; // don't care at statement level
        // expression
        // expression part has to be done inside the expression itself

        // ==== unreachable branch removal ==== //
        // operate the next or child, not yourself
        self.final3_stmt_type :=
            if self.stmt_removal_advice then
                4
            else
                self.final2_stmt_type;
        next.stmt_removal_advice := self.stmt_removal_advice;
    }
}
class CIncrStmt : Statement {
    children {
        assigned_expr : Expression; // deactivated by default for this type
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 1;

        // ==== desugarDecr / desugarIncr ==== //
        // statement
        self.final0_stmt_type := 0; // change to CAssignStmt
        // expression
        assigned_expr.final0_expr_type := 0; // forced to CBinaryExpr
        assigned_expr.final0_value := assigned_expr.original_value; // don't care
        assigned_expr.final0_var_id := assigned_expr.original_var_id; // don't care
        assigned_expr.is_null := !true;
        assigned_expr.is_special_expr := true; // forced to special expr
        assigned_expr.special_lhs_var_id := self.var_id;
        assigned_expr.special_rhs_value := 1;
        assigned_expr.special_operator := 1; // plus

        // ==== constant propagation ==== //
        // statement
        self.final1_stmt_type := self.final0_stmt_type;
        self.final_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
        // expression
        // since the expr is already special, we don't care about the other attributes
        // then there's no need to do constant propagation here
        assigned_expr.original_cp_info := self.original_cp_info;
        assigned_expr.final1_value := assigned_expr.final0_value; // don't care
        assigned_expr.final1_expr_type := assigned_expr.final0_expr_type; // don't care
        assigned_expr.final1_var_id := assigned_expr.final0_var_id; // don't care
        
        // ==== constant folding ==== //
        self.final2_stmt_type := self.final1_stmt_type; // don't care at statement level

        // ==== unreachable branch removal ==== //
        // operate the next or child, not yourself
        self.final3_stmt_type :=
            if self.stmt_removal_advice then
                4
            else
                self.final2_stmt_type;
        next.stmt_removal_advice := self.stmt_removal_advice;
    }
}
class CDecrStmt : Statement {
    children {
        assigned_expr : Expression; // deactivated by default for this type
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 1;

        // ==== desugarDecr / desugarIncr ==== //
        // statement
        self.final0_stmt_type := 0; // change to CAssignStmt
        // expression
        assigned_expr.final0_expr_type := 0; // forced to CBinaryExpr
        assigned_expr.final0_value := assigned_expr.original_value; // don't care
        assigned_expr.final0_var_id := assigned_expr.original_var_id; // don't care
        assigned_expr.is_null := !true;
        assigned_expr.is_special_expr := true; // forced to special expr
        assigned_expr.special_lhs_var_id := self.var_id;
        assigned_expr.special_rhs_value := 1;
        assigned_expr.special_operator := 0; // minus

        // ==== constant propagation ==== //
        // statement
        self.final1_stmt_type := self.final0_stmt_type;
        self.final_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
        // expression
        // since the expr is already special, we don't care about the other attributes
        // then there's no need to do constant propagation here
        assigned_expr.original_cp_info := self.original_cp_info;
        assigned_expr.final1_value := assigned_expr.final0_value; // don't care
        assigned_expr.final1_expr_type := assigned_expr.final0_expr_type; // don't care
        assigned_expr.final1_var_id := assigned_expr.final0_var_id; // don't care

        // ==== constant folding ==== //
        self.final2_stmt_type := self.final1_stmt_type; // don't care at statement level

        // ==== unreachable branch removal ==== //
        // operate the next or child, not yourself
        self.final3_stmt_type :=
            if self.stmt_removal_advice then
                4
            else
                self.final2_stmt_type;
        next.stmt_removal_advice := self.stmt_removal_advice;
    }
}
class CIfStmt : Statement {
    children {
        condition : Expression;
        then_first_statement : [Statement];
        else_first_statement : [Statement];
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 3;

        // ==== desugarDecr / desugarIncr ==== //
        // statement --> do nothing
        self.final0_stmt_type := 0;
        // expression --> do nothing
        condition.final0_expr_type := condition.original_expr_type;
        condition.final0_value := condition.original_value;
        condition.final0_var_id := condition.original_var_id;
        condition.is_null := !true;
        condition.is_special_expr := !true;
        condition.special_lhs_var_id := null();
        condition.special_rhs_value := null();
        condition.special_operator := null();

        // ==== constant propagation ==== //
        // statement
        self.final1_stmt_type := self.final0_stmt_type;
        self.final_cp_info := self.original_cp_info; // if statement doesn't generate constant info
        then_first_statement.original_cp_info := self.original_cp_info;
        else_first_statement.original_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
        // expression
        condition.original_cp_info := self.original_cp_info;
        condition.final1_value :=
            if condition.final0_expr_type == 2 then
                // CVarRefExpr, should replace the variable with constant value
                if query_info( self.original_cp_info, condition.final0_var_id ) then
                    get_value( self.original_cp_info, condition.final0_var_id )
                else
                    condition.final0_value
            else
                condition.final0_value;
        condition.final1_expr_type :=
            if condition.final0_expr_type == 2 then
                // CVarRefExpr
                if query_info( self.original_cp_info, condition.final0_var_id ) then
                    // CVarRefExpr -> CConstantExpr
                    1
                else
                    condition.final0_expr_type
            else
                condition.final0_expr_type;
        condition.final1_var_id := condition.final0_var_id; // don't care

        // ==== constant folding ==== //
        self.final2_stmt_type := self.final1_stmt_type; // don't care at statement level

        // ==== unreachable branch removal ==== //
        // operate the next or child, not yourself
        self.final3_stmt_type :=
            if self.stmt_removal_advice then
                4
            else
                self.final2_stmt_type;
        next.stmt_removal_advice := self.stmt_removal_advice;
        // decide for children whether they should be removed or not
        then_first_statement.stmt_removal_advice :=
            if self.stmt_removal_advice then
                // if I got removed, my children should also be removed
                self.stmt_removal_advice
            else
                if condition.final2_expr_type == 1 && condition.final2_value == !true then
                    // condition is CConstantExpr and it's evaluated to !true
                    // then remove
                    true
                else
                    // otherwise don't remove
                    !true;
        else_first_statement.stmt_removal_advice :=
            if self.stmt_removal_advice then
                // if I got removed, my children should also be removed
                self.stmt_removal_advice
            else
                if condition.final2_expr_type == 1 && condition.final2_value == true then
                    // condition is CConstantExpr and it's evaluated to true
                    // then remove
                    true
                else
                    // otherwise don't remove
                    !true;
    }
}
class CNullStmt : Statement {
    children {
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 4;
        self.final0_stmt_type := self.original_stmt_type;

        // ==== desugarDecr / desugarIncr ==== //
        // statement --> do nothing
        self.final1_stmt_type := self.final0_stmt_type;

        // ==== constant propagation ==== //
        self.final_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;

        // ==== constant folding ==== //
        self.final2_stmt_type := self.final1_stmt_type; // don't care at statement level

        // ==== unreachable branch removal ==== //
        // operate the next or child, not yourself
        self.final3_stmt_type :=
            if self.stmt_removal_advice then
                4
            else
                self.final2_stmt_type;
        next.stmt_removal_advice := self.stmt_removal_advice;
    }
}


// ================================ //
// ========== Expression ========== //
// ================================ //

interface Expression {
    output is_null : bool;
    output need_constant_folding : bool;

    // 0: CBinaryExpr, 1: CConstantExpr, 2: CVarRefExpr, others(3): ??
    // this will be override by is_special_expr attribute
    output original_expr_type : int; // original expression type that matches the class
    output final0_expr_type : int; // expression type after desugarDecr / desugarIncr
    output final1_expr_type : int; // expression type after constant propagation
    output final2_expr_type : int; // expression type after constant folding

    // special attributes for desugarDecr / desugarIncr
    // the desugarDecr method converts C?Expr in DecrStmt to a special CBinaryExpr 
    // with no nested children, i.e., 
    // whose lhs is a var, and rhs is a constant 1.
    output is_special_expr : bool; // trigger for the following attributes
    output special_lhs_var_id : int;
    output special_rhs_value : int; 
    output special_operator : int; // 0: minus, 1: plus, others: others

    // attribute only for CConstExpr
    input original_value : int; // original
    output final0_value : int; // after desugarDecr / desugarIncr
    output final1_value : int; // after constant propagation
    output final2_value : int; // after constant folding

    // attribute only for CVarRefExpr
    input original_var_id : int;
    output final0_var_id : int;
    output final1_var_id : int;
    output final2_var_id : int;

    // attribute only for CBinaryExpr
    input original_operator : int; // anything we don't care about the mapping

    // for constant propagation
    output original_cp_info : info;
}
class CBinaryExpr : Expression {
    children {
        // for binary expression, lhs and rhs *must* exist
        lhs : Expression;
        rhs : Expression;
    }
    rules {
        self.original_expr_type := 0;

        // ==== desugarDecr / desugarIncr ==== //
        // lhs
        lhs.final0_expr_type :=
            if self.is_special_expr then
                3
            else
                lhs.original_expr_type;
        lhs.is_null :=
            if self.is_special_expr then
                true
            else
                !true;
        lhs.is_special_expr := !true;
        lhs.special_lhs_var_id := null();
        lhs.special_rhs_value := null();
        lhs.special_operator := null();
        lhs.final0_value := lhs.original_value;
        lhs.final0_var_id := lhs.original_var_id;
        // rhs
        rhs.final0_expr_type :=
            if self.is_special_expr then
                3
            else
                rhs.original_expr_type;
        rhs.is_null := 
            if self.is_special_expr then
                true
            else
                !true;
        rhs.is_special_expr := !true;
        rhs.special_lhs_var_id := null();
        rhs.special_rhs_value := null();
        rhs.special_operator := null();
        rhs.final0_value := rhs.original_value;
        rhs.final0_var_id := rhs.original_var_id;

        // ==== constant propagation ==== //
        // lhs
        lhs.original_cp_info := self.original_cp_info;
        lhs.final1_expr_type :=
            if self.is_special_expr then
                // don't care
                lhs.final0_expr_type
            else
                if lhs.final0_expr_type == 2 then
                    // CVarRefExpr
                    if query_info( self.original_cp_info, lhs.final0_var_id ) then
                        // CVarRefExpr -> CConstantExpr
                        1
                    else
                        lhs.final0_expr_type
                else
                    lhs.final0_expr_type;
        lhs.final1_value :=
            if self.is_special_expr then
                // don't care
                lhs.final0_value
            else
                if lhs.final0_expr_type == 2 then
                    // CVarRefExpr
                    if query_info( self.original_cp_info, lhs.final0_var_id ) then
                        get_value( self.original_cp_info, lhs.final0_var_id )
                    else
                        lhs.final0_value
                else
                    lhs.final0_value;
        lhs.final1_var_id := lhs.final0_var_id;
        // rhs
        rhs.original_cp_info := self.original_cp_info;
        rhs.final1_expr_type :=
            if self.is_special_expr then
                // don't care
                rhs.final0_expr_type
            else
                if rhs.final0_expr_type == 2 then
                    // CVarRefExpr
                    if query_info( self.original_cp_info, rhs.final0_var_id ) then
                        // CVarRefExpr -> CConstantExpr
                        1
                    else
                        rhs.final0_expr_type
                else
                    rhs.final0_expr_type;
        rhs.final1_value :=
            if self.is_special_expr then
                // don't care
                rhs.final0_value
            else
                if rhs.final0_expr_type == 2 then
                    if query_info( self.original_cp_info, rhs.final0_var_id ) then
                        get_value( self.original_cp_info, rhs.final0_var_id )
                    else
                        rhs.final0_value
                else
                    rhs.final0_value;
        rhs.final1_var_id := rhs.final0_var_id;

        // ==== constant folding ==== //
        // special expr is guaranteed to not need constant folding
        // so no need to add that condition
        self.need_constant_folding := lhs.final1_expr_type == 1 && rhs.final1_expr_type == 1;
        self.final2_expr_type :=
            if self.need_constant_folding then
                // CBinaryExpr -> CConstantExpr
                2
            else
                self.final1_expr_type;
        self.final2_value :=
            if self.need_constant_folding then
                // (important) should use fina2_value of both lhs and rhs
                // this indicates a post order traversal
                compute_constant( lhs.final2_value, rhs.final2_value, self.original_operator )
            else
                self.final1_value;
        self.final2_var_id := self.final1_var_id;
    }
}
class CConstantExpr : Expression {
    children {
    }
    rules {
        self.original_expr_type := 1;
        // ==== constant folding ==== //
        // special expr is guaranteed to not need constant folding
        // so no need to add that condition
        self.need_constant_folding := !true;
        self.final2_expr_type := self.final1_expr_type;
        self.final2_value := self.final1_value;
        self.final2_var_id := self.final1_var_id;
    }
}
// this class is only for expression to the right of the equation
// the left part is enclosed as an attribute "var_id" in Statement
class CVarRefExpr : Expression {
    children {
    }
    rules {
        self.original_expr_type := 2;
        // ==== constant folding ==== //
        // special expr is guaranteed to not need constant folding
        // so no need to add that condition
        self.need_constant_folding := !true;
        self.final2_expr_type := self.final1_expr_type;
        self.final2_value := self.final1_value;
        self.final2_var_id := self.final1_var_id;
    }
}

