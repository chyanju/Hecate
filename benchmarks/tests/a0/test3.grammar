traversal fuse {
    case Group {
        iterate leftChild { recur leftChild; }
        iterate rightChild { recur rightChild; }
        ??;
        // adding this will cause error
        // iterate rightChild { recur rightChild; }
    }
}
interface Element {
    output v : int;
    output x : int;
    output y : int;
    input isLeaf : bool;
}
class Group : Element {
    children { 
        leftChild : [Element];
        rightChild : [Element];
    }
    rules {
        self.v :=
            if self.isLeaf then
                1
            else
                [0]{leftChild.v : -1} + [0]{leftChild.v : -1};
        self.y := self.v * 2;
        self.x := 
            if self.isLeaf then
                -1
            else
                self.v;
        leftChild.x :=
            if self.isLeaf then
                -1
            else
                self.x + 2;
    }
}