traversal fuse {
    case Group {
        // iterate to generate isLeaf info
        ??;
        iterate l { recur l; }
        iterate r { recur r; }

    }
}
interface Element {
    output v : int;
    output x : int;
    output tmpx : int;
    output y : int;
    output id : bool;
    output hasLeft : bool;
    output hasRight : bool;
    output isLeaf : bool;
    // -1: root?, 0: left, 1: right
    output LR : int;
}
class Group : Element {
    children {
        l : [Element];
        r : [Element];
    }
    rules {
        self.id := true;
        self.hasLeft := [0]{ l.id : false };
        self.hasRight := [0]{ r.id : false };
        self.isLeaf := self.hasLeft && self.hasRight;
        l.LR := 0;
        r.LR := 1;

        l.v :=
            if l.isLeaf then
                1
            else
                [0]{ l.l.v }





        self.y := self.v * 2;

        self.v := 
            if self.isLeaf then
                1
            else
                [0]{ l.v : 1 } + [0]{ r.v : 1 };

        l.tmpx :=
            if self.isLeaf then
                -9999
            else
                self.x + 2;

        self.x := 
            if self.isLeaf then
                self.tmpx
            else
                self.v;
    }
}