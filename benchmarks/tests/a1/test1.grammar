// grammar that demonstrates how to bypass the "false" eval bug
// and tell the structural leaf info of a node itself
traversal fuse {
    case Group {
        ??;
        iterate l { ??; recur l; ??; }
        iterate r { ??; recur r; ??; }
        ??;
    }
}
interface Element {

    // isLeaf property computation
    output id : bool;
    output hasLeft : bool;
    output hasRight : bool;
    output isLeaf : bool;

    // helper constants
    output constantTrue : bool;
}
class Group : Element {
    children {
        l : [Element];
        r : [Element];
    }
    rules {
        // assign constants to constant variables
        self.constantTrue := true;

        // isLeaf property computation
        self.id := true;
        self.isLeaf := self.hasLeft && self.hasRight;
        self.hasLeft := [0]{ l.id : !self.constantTrue };
        self.hasRight := [0]{ r.id : !self.constantTrue };
        

    }
}