// second attempt to solve the oopsla example

// case RootInterface
// recur root;
// iterate root { eval root.x; eval root.y; }
//
// case NodeInterface
// iterate l { recur l; }
// iterate r { recur r; }
// eval self.constantXX;
// eval self.isLeaf;
// eval self.v;
// iterate l { eval l.x; eval l.y; }
// iterate r { eval r.x; eval r.y; }

// ideal traversal
traversal fuse {
    case RootInterface {
        ??;
        recur root;
    }
    case NodeInterface {
        iterate l { ??; recur l; }
        iterate r { ??; recur r; }
    }
}



interface Root {
}
class RootInterface : Root {
    children {
        root : Node;
    }
    rules {
        root.x := 1;
        root.y := 2;
    }
}

interface Node {

    output x : int;
    output y : int;

}
class NodeInterface : Node {
    children {
        l : [Node];
        r : [Node];
    }
    rules {
        l.x := 1;
        l.y := 2;
        r.x := 1;
        r.y := 2;
    }
}