// this deals with desugarDecr and desugarIncr
// this also deals with constant propagation
// notes:
// 1. this takes too long and haven't finished yet

traversal fuse {
    case CProgram {
        iterate first_function { recur first_function; }
    }
    case CFunction {
        iterate first_statement { ??; recur first_statement; }
        iterate next { recur next; }
    }

    // assignment series
    case CAssignStmt {
        ??;
        recur assigned_expr;
        iterate next { recur next; }
    }
    case CIncrStmt {
        ??;
        recur assigned_expr;
        iterate next { recur next; }
    }
    case CDecrStmt {
        ??;
        recur assigned_expr;
        iterate next { recur next; }
    }
    case CIfStmt {
        ??;
        recur condition;
        iterate then_first_statement { recur then_first_statement; }
        iterate else_first_statement { recur else_first_statement; }
        iterate next { recur next; }
    }
    case CNullStmt {
        ??;
        iterate next { recur next; }
    }

    // expression series
    case CConstantExpr {
        ??;
    }
    case CBinaryExpr {
        ??;
        recur lhs;
        recur rhs;
    }
    case CVarRefExpr {
        ??;
    }
}

// ============================= //
// ========== Program ========== //
// ============================= //

interface Program {
    
}
class CProgram : Program {
    children {
        first_function : [Function];
    }
    rules {
    }
}

// ============================== //
// ========== Function ========== //
// ============================== //

interface Function {
    
}
class CFunction : Function {
    children {
        next : [Function];
        first_statement : [Statement];
    }
    rules {
        first_statement.original_cp_info := empty_info();
    }
}

// =============================== //
// ========== Statement ========== //
// =============================== //
// desugarDecr will change CDecrStmt to CAssignStmt
// desugarInc will change CIncrStmt to CAssignStmt

interface Statement {
    // specific for CAssignStmt, CIncrStmt, CDecrStmt
    // corresponds to `int VarId` in `VarRefExpr *Id`
    // if it's CIfStmt or CNullStmt, this value should be null
    input var_id : int;

    // 0: CAssignStmt, 1: CIncrStmt, 2: CDecrStmt, 3: CIfStmt, 4: CNullStmt, others: ??
    output original_stmt_type : int;
    output final_stmt_type : int;

    // attributes for constant propagation
    output original_cp_info : info;
    output final_cp_info : info;
}

class CAssignStmt : Statement {
    children {
        assigned_expr : Expression; // Expression
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 0;
        self.final_stmt_type := 0;

        // desugarDecr / desugarIncr part
        assigned_expr.is_null := !true;
        assigned_expr.is_special_expr := !true;
        assigned_expr.final_lhs_var_id := null();
        assigned_expr.final_rhs_value := null();
        assigned_expr.final_operator := null();

        // constant propagation part
        self.final_cp_info :=
            if assigned_expr.original_expr_type == 1 then
                // CConstExpr, should update the cp_info
                update_info( self.original_cp_info, self.var_id, assigned_expr.value )
            else
                self.original_cp_info;
        assigned_expr.original_cp_info := self.original_cp_info;
        assigned_expr.final_value :=
            if assigned_expr.original_expr_type == 2 then
                if query_info( self.original_cp_info, assigned_expr.var_id ) then
                    get_value( self.original_cp_info, assigned_expr.var_id )
                else
                    assigned_expr.value
            else
                assigned_expr.value;
        assigned_expr.final_expr_type :=
            if assigned_expr.original_expr_type == 2 then
                // CVarRefExpr
                if query_info( self.original_cp_info, assigned_expr.var_id ) then
                    // CVarRefExpr -> CConstantExpr
                    1
                else
                    assigned_expr.original_expr_type
            else
                assigned_expr.original_expr_type;
        next.original_cp_info := self.final_cp_info;
    }
}
class CIncrStmt : Statement {
    children {
        assigned_expr : Expression; // deactivated by default for this type
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 1;
        self.final_stmt_type := 0; // change to CAssignStmt

        // desugarDecr / desugarIncr part
        assigned_expr.final_expr_type := 0; // CBinaryExpr
        assigned_expr.is_null := !true;
        assigned_expr.is_special_expr := true;
        assigned_expr.final_lhs_var_id := self.var_id;
        assigned_expr.final_rhs_value := 1;
        assigned_expr.final_operator := 1; // plus

        // constant propagation
        assigned_expr.original_cp_info := self.original_cp_info;
        assigned_expr.final_value := assigned_expr.value;
        self.final_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
    }
}
class CDecrStmt : Statement {
    children {
        assigned_expr : Expression; // deactivated by default for this type
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 2;
        self.final_stmt_type := 0; // change to CAssignStmt

        // desugarDecr / desugarIncr part
        assigned_expr.final_expr_type := 0; // CBinaryExpr
        assigned_expr.is_null := !true;
        assigned_expr.is_special_expr := true;
        assigned_expr.final_lhs_var_id := self.var_id;
        assigned_expr.final_rhs_value := 1;
        assigned_expr.final_operator := 0; // minus

        // constant propagation
        assigned_expr.original_cp_info := self.original_cp_info;
        assigned_expr.final_value := assigned_expr.value;
        self.final_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
    }
}
class CIfStmt : Statement {
    children {
        condition : Expression;
        then_first_statement : [Statement];
        else_first_statement : [Statement];
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 3;
        self.final_stmt_type := 3;

        // desugarDecr / desugarIncr part
        condition.is_null := !true;
        condition.is_special_expr := !true;
        condition.final_lhs_var_id := null();
        condition.final_rhs_value := null();
        condition.final_operator := null();

        // constant propagation
        condition.original_cp_info := self.original_cp_info;
        condition.final_expr_type :=
            if condition.original_expr_type == 2 then
                // CVarRefExpr
                if query_info( self.original_cp_info, condition.var_id ) then
                    // CVarRefExpr -> CConstantExpr
                    1
                else
                    condition.original_expr_type
            else
                condition.original_expr_type;
        condition.final_value := condition.value;
        self.final_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
    }
}
class CNullStmt : Statement {
    children {
        next : [Statement];
    }
    rules {
        self.original_stmt_type := 4;
        self.final_stmt_type := 4;

        // constant propagation
        self.final_cp_info := self.original_cp_info;
        next.original_cp_info := self.final_cp_info;
    }
}


// ================================ //
// ========== Expression ========== //
// ================================ //

interface Expression {
    output is_null : bool;

    // 0: CBinaryExpr, 1: CConstantExpr, 2: CVarRefExpr, others(3): ??
    // this will override by is_special_expr attribute
    output original_expr_type : int;
    output final_expr_type : int;

    // special attributes for desugarDecr
    // the desugarDecr method converts C?Expr in DecrStmt to a special CBinaryExpr 
    // with no nested children, i.e., 
    // whose lhs is a var, and rhs is a constant 1.
    output is_special_expr : bool; // trigger for the following attributes
    output final_lhs_var_id : int;
    output final_rhs_value : int; 
    output final_operator : int; // 0: minus, 1: plus, others: others

    // attribute only for CConstExpr
    input value : int;
    output final_value : int;

    // attribute only for CVarRefExpr
    input var_id : int;

    // for constant propagation
    output original_cp_info : info;
}
class CBinaryExpr : Expression {
    children {
        // for binary expression, lhs and rhs *must* exist
        lhs : Expression;
        rhs : Expression;
    }
    rules {
        self.original_expr_type := 0;

        // desugarDecr / desugarIncr part
        lhs.final_expr_type := 3;
        lhs.is_null :=
            if self.is_special_expr then
                true
            else
                !true;
        lhs.is_special_expr := !true;
        lhs.final_lhs_var_id := null();
        lhs.final_rhs_value := null();
        lhs.final_operator := null();

        rhs.final_expr_type := 3;
        rhs.is_null := 
            if self.is_special_expr then
                true
            else
                !true;
        rhs.is_special_expr := !true;
        rhs.final_lhs_var_id := null();
        rhs.final_rhs_value := null();
        rhs.final_operator := null();

        // constant propagation
        lhs.original_cp_info := self.original_cp_info;
        rhs.original_cp_info := self.original_cp_info;
        lhs.final_expr_type :=
            if lhs.original_expr_type == 2 then
                // CVarRefExpr
                if query_info( self.original_cp_info, lhs.var_id ) then
                    // CVarRefExpr -> CConstantExpr
                    1
                else
                    lhs.original_expr_type
            else
                lhs.original_expr_type;
        lhs.final_value :=
            if lhs.original_expr_type == 2 then
                if query_info( self.original_cp_info, lhs.var_id ) then
                    get_value( self.original_cp_info, lhs.var_id )
                else
                    lhs.value
            else
                lhs.value;
        rhs.final_expr_type :=
            if rhs.original_expr_type == 2 then
                // CVarRefExpr
                if query_info( self.original_cp_info, rhs.var_id ) then
                    // CVarRefExpr -> CConstantExpr
                    1
                else
                    rhs.original_expr_type
            else
                rhs.original_expr_type;
        rhs.final_value :=
            if rhs.original_expr_type == 2 then
                if query_info( self.original_cp_info, rhs.var_id ) then
                    get_value( self.original_cp_info, rhs.var_id )
                else
                    rhs.value
            else
                rhs.value;
    }
}
class CConstantExpr : Expression {
    children {
    }
    rules {
        self.original_expr_type := 1;
    }
}
// this class is only for expression to the right of the equation
// the left part is enclosed as an attribute "var_id" in Statement
class CVarRefExpr : Expression {
    children {
    }
    rules {
        self.original_expr_type := 2;
    }
}

