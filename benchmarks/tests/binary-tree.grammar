// BinaryTree example of Grafter
// this example only deals with insert and search
// every insertion is provided as an input to the RootInterface
// every search result is returned as an output of the RootInterface
// (notice) assume every insert query can be fulfilled (the tree is big enough so you can always find a spot)

// ideal traversal
traversal fuse {
    case RootInterface {
        ??;
        recur root;
        ??;
    }
    case NodeInterface {
        ??;
        iterate l { ??; recur l; }
        iterate r { ??; recur r; }
        ??;
    }
}


interface Root {
    // the user inputs the value to insert from the root node
    input valToInsert : int;

    // the user inputs the value to search from the root node
    input valToSearch : int;

    // returns whether the value is found or not
    // if the valToSearch is null, return false
    output valFound : bool;
}
class RootInterface : Root {
    children {
        root : Node;
    }
    rules {
        root.valToInsert := self.valToInsert;
        root.valToSearch := self.valToSearch;

        self.valFound := root.valFound;
    }
}


interface Node {
    
    // ====== constant section ====== //

    // preset constants
    output constantNull : int;
    output constantTrue : bool;
    output constantFalse : bool;
    
    // ====== insert section ====== //

    // inherit the input command from parent
    output valToInsert : int;

    // existing value stored in the current node
    // notice that this comes from the user (structural info)
    input valToStore : int;

    // the actual value stored after eval
    // this is computed using valToInsert and valToStore
    // i.e.,
    // if the node has value already specified structurally
    // then it should pass the valToInsert to its corresponding child
    output valStored : int; 

    // easy flag to tell whether the valStored should be set to valToInsert or valToStore
    // true: valToInsert
    // false: valToStore
    // (notice) if we don't insert here (false), it means
    // 1. we don't have anything to insert, or
    // 2. there's already a valToStore
    output insertHere : bool;

    // ====== search section ====== //

    output valToSearch : int;
    output valFound : bool;
    // helper attributes for self/left/right search status
    output selfFound : bool;
    output lFound : bool;
    output rFound : bool;

}
class NodeInterface : Node {
    children {
        l : [Node];
        r : [Node];
    }
    rules {

        // ====== constant section ====== //

        self.constantNull := -9999;
        self.constantTrue := true;
        self.constantFalse := !self.constantTrue;

        // ====== insert section ====== //

        self.insertHere :=
            if self.valToInsert == self.constantNull then
                self.constantFalse
            else
                if self.valToStore == self.constantNull then
                    self.constantTrue
                else
                    // (notice) special case: equiv. of insert and store
                    if self.valToStore == self.valToInsert then
                        self.constantTrue
                    else
                        self.constantFalse;


        self.valStored := 
            if self.insertHere then
                self.valToInsert
            else
                self.valToStore;

        l.valToInsert := 
            if self.insertHere then
                self.constantNull
            else
                // (notice) see comments of insertHere
                if self.valToInsert == self.constantNull then
                    self.constantNull
                else
                    if self.valToInsert <= self.valToStore then
                        self.valToInsert
                    else
                        self.constantNull;

        r.valToInsert := 
            if self.insertHere then
                self.constantNull
            else
                // (notice) see comments of insertHere
                if self.valToInsert == self.constantNull then
                    self.constantNull
                else
                    if self.valToInsert > self.valToStore then
                        self.valToInsert
                    else
                        self.constantNull;

        // ====== search section ====== //

        l.valToSearch := self.valToSearch;
        r.valToSearch := self.valToSearch;

        self.selfFound := 
            if self.valStored == self.constantNull then
                self.constantFalse
            else
                if self.valToSearch == self.constantNull then
                    self.constantFalse
                else
                    if self.valToSearch == self.valStored then
                        self.constantTrue
                    else
                        self.constantFalse;

        self.lFound := [0]{ l.valFound : self.constantFalse };
        self.rFound := [0]{ r.valFound : self.constantFalse };

        // aggregate search result
        self.valFound := self.selfFound && self.lFound && self.rFound;
    }
}