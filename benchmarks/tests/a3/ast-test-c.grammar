// testing constant folding only
// == desired schedule == //
// traversal fuse {
//   case CProgram {
//     iterate[left] first_function {
//       recur first_function;
//     }
//   }
//   case CFunction {
//     iterate[left] first_statement {
//       recur first_statement;
//     }
//     iterate[left] next {
//       recur next;
//     }
//   }
//   case AssignmentStatement {
//     recur assigned_expr;
//     eval self.statement_type;
//   }
//   case IfStatement {
//     recur condition;
//     iterate[left] then_first_statement {
//       recur then_first_statement;
//     }
//     iterate[left] else_first_statement {
//       recur else_first_statement;
//     }
//     eval self.statement_type;
//   }
//   case NopStatement {
//     eval self.statement_type;
//   }
//   case IncrStatement {
//     eval self.statement_type;
//   }
//   case DecrStatement {
//     eval self.statement_type;
//   }
//   case ConstantExpression {
//     eval self.need_constant_folding;
//     eval self.final_value;
//     eval self.original_expression_type;
//     eval self.final_expression_type;
//   }
//   case BinaryExpression {
//     recur lhs;
//     recur rhs;
//     eval self.original_expression_type;
//     eval self.need_constant_folding;
//     eval self.final_value;
//     eval self.final_expression_type;
//   }
//   case VarRefExpression {
//     eval self.original_expression_type;
//     eval self.final_expression_type;
//     eval self.final_value;
//     eval self.need_constant_folding;
//   }
// }

traversal fuse {
    case CProgram {
        iterate first_function { recur first_function; }
    }
    case CFunction {
        iterate first_statement { recur first_statement; }
        iterate next { recur next; }
    }

    // assignment series
    case AssignmentStatement {
        recur assigned_expr;
        ??;
    }
    case IfStatement {
        recur condition;
        iterate then_first_statement { recur then_first_statement; }
        iterate else_first_statement { recur else_first_statement; }
        ??;
    }
    case NopStatement {
        ??;
    }
    case IncrStatement {
        ??;
    }
    case DecrStatement {
        ??;
    }

    // expression series
    case ConstantExpression {
        ??;
    }
    case BinaryExpression {
        recur lhs;
        recur rhs;
        ??;
    }
    case VarRefExpression {
        ??;
    }
}

// ============================= //
// ========== Program ========== //
// ============================= //

interface Program {
    
}
class CProgram : Program {
    children {
        first_function : [Function];
    }
    rules {
    }
}

// ============================== //
// ========== Function ========== //
// ============================== //

interface Function {
    
}
class CFunction : Function {
    children {
        next : [Function];
        first_statement : [Statement];
    }
    rules {
    }
}

// =============================== //
// ========== Statement ========== //
// =============================== //

interface Statement {
    // 0: ASSIGNMENT, 1: IF, 2: NOP, 3: INCR, 4(others): DECR
    output statement_type : int;

    // ==== based on different statement_type, the following attributes are enabled accordingly ==== //
    // 0: ASSIGNMENT, 3: INCR, 4(others): DECR
    input var_id : int; // expanded LHS id, originally it's a VarRefExpression

}
class AssignmentStatement : Statement {
    children {
        assigned_expr : Expression;
    }
    rules {
        self.statement_type := 0;
    }
}
class IfStatement : Statement {
    children {
        condition : Expression;
        then_first_statement : [Statement];
        else_first_statement : [Statement];
    }
    rules {
        self.statement_type := 1;
    }
}
class NopStatement : Statement {
    children {
    }
    rules {
        self.statement_type := 2;
    }
}
class IncrStatement : Statement {
    children {
    }
    rules {
        self.statement_type := 3;
    }
}
class DecrStatement : Statement {
    children {
    }
    rules {
        self.statement_type := 4;
    }
}

// ================================ //
// ========== Expression ========== //
// ================================ //

interface Expression {
    // 0: CONSTANT, 1: BINARY, 2(others): VARREF
    // possible conversions:
    // - BINARY -> CONSTANT (constant folding)
    //     - original_expression_type -> final_expression_type
    //     - value -> final_value
    output original_expression_type : int;
    output final_expression_type : int; 

    // ==== based on different expression_type, the following attributes are enabled accordingly ==== //
    // 0: CONSTANT
    input value : int;
    output final_value : int;

    // 1: BINARY
    // binary also has structural LHS and RHS
    input operator : int; // 0: add, 1(others): subtract

    // 2: VARREF
    input var_id : int;

    // method conditions
    output need_constant_folding : bool;
}
class ConstantExpression : Expression {
    children {
    }
    rules {
        self.original_expression_type := 0;
        self.need_constant_folding := !true;
        self.final_expression_type := 0;
        self.final_value := self.value;
    }
}
class BinaryExpression : Expression {
    children {
        // for binary expression, lhs and rhs *must* exist
        lhs : Expression;
        rhs : Expression;
    }
    rules {
        self.original_expression_type := 1;

        self.need_constant_folding := 
            if lhs.final_expression_type == 0 && rhs.final_expression_type == 0 then
                true
            else
                !true;

        self.final_expression_type := 
            if self.need_constant_folding then
                0
            else
                1;

        self.final_value := 
            if self.need_constant_folding then
                if self.operator == 0 then
                    lhs.final_value + rhs.final_value
                else
                    lhs.final_value - rhs.final_value
            else
                self.value;
    }
}
class VarRefExpression : Expression {
    children {
    }
    rules {
        self.original_expression_type := 2;
        self.need_constant_folding := !true;
        self.final_expression_type := 2;
        self.final_value := self.value;
    }
}
