#lang racket

(require rosette/lib/meta/meta
         2htdp/batch-io
         parser-tools/lex)

;; consider a simple schedule generated by FTL. This schedule is for a grammar with the midnode attributes:
;; child.a = self.a
;; self.b = child.b
;; The idea is that FTL will generate a sched file with something in it which we would like to convert to this:

(define example_target-schedule `((td (root child attribute_1) (midnode left attribute_1) (midnode right attribute_1))
                                  (bu (root child attribute_2) (midnode left attribute_2) (midnode right attribute_2))
                                  (bu (root child attribute_3) (midnode left attribute_3) (midnode right attribute_3))))

;; Note: we do not consider loops for now.

(define example_ftl_output_file "schedules/simple-schedule.sched")
(define string_content (file->string example_ftl_output_file))
(define split_commas (string-split string_content ","))
(define length_list (length split_commas))

(define (trim_newlines list_of_strings)
  (map (lambda (st)
         (string-split st "\n")) list_of_strings))

(define (trim_leftsq list_of_strings)
  (map (lambda (st)
         (string-split st "[")) list_of_strings))

(define (trim_rightsq list_of_strings)
  (map (lambda (st)
         (string-split st "]")) list_of_strings))

;(display (trim_leftsq (trim_newlines split_commas)))

